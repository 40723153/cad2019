var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Solvespace', 'text': '', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Solvespace編譯', 'text': '進入 Y:\\portablegit\\bin 找到檔案sh.exe 將其改名為 sh_rename_for_solvespace.exe \n 檢查git版本( git 2.13 版本以上, 可以使用下列 git clone\xa0 --recurse-submodules 取得所有子模組資料\xa0 ) \n \xa0 \xa0 \xa0 \xa0git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace \n ( 取下子模組中的資料放在solvespace的資料夾中 ) \n 上述步驟同: \n \xa0 \xa0 \xa0git clone\xa0 https://github.com/solvespace/solvespace.git \xa0 \n \xa0 \xa0 \xa0cd solvespace \n \xa0 \xa0 \xa0git submodule init \n \xa0 \xa0 \xa0git submodule update \n 打開CMakeLists.txt檔案,將無法編譯的第713.714行進行註解 \n (edit Y:\\tmp\\solvespace\\extlib\\angle\\CMakeLists.txt comment out line 713 and 714) \n 接著需要手動進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中 (即隨身系統的 msys64\\mingw64\\lib 目錄): \n cd solvespace \n cd extlib \n cd libpng \n mkdir build \n cd build \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make \n 編譯完成後, 需將檔案libpng.dll.a重新命名為libpng_static.a並複製到\xa0 Y:\\msys64\\mingw64\\lib , 即可執行. \n \n', 'tags': '', 'url': 'Solvespace編譯.html'}, {'title': 'SolveSpace操作', 'text': '\n \n', 'tags': '', 'url': 'SolveSpace操作.html'}, {'title': 'V-rep', 'text': '', 'tags': '', 'url': 'V-rep.html'}, {'title': '每週進度', 'text': '', 'tags': '', 'url': '每週進度.html'}, {'title': 'w1', 'text': '', 'tags': '', 'url': 'w1.html'}, {'title': 'w2', 'text': '', 'tags': '', 'url': 'w2.html'}, {'title': 'w3', 'text': '', 'tags': '', 'url': 'w3.html'}, {'title': 'w4', 'text': '', 'tags': '', 'url': 'w4.html'}, {'title': 'W15', 'text': 'w15 操作進度 \n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'NX12', 'text': '', 'tags': '', 'url': 'NX12.html'}, {'title': 'CH1.2', 'text': '', 'tags': '', 'url': 'CH1.2.html'}, {'title': 'CH3.4', 'text': '', 'tags': '', 'url': 'CH3.4.html'}, {'title': 'CH5.6', 'text': '', 'tags': '', 'url': 'CH5.6.html'}, {'title': 'CH7.8', 'text': '', 'tags': '', 'url': 'CH7.8.html'}, {'title': 'CH9', 'text': '此章節在介紹如何使用 NX12 生成用於三軸立式加工中心的 CNC 代碼製造模組，該模組使我們可以對鑽孔，銑削，車削和線切割 EDM 刀具路徑進行編程和一些後續處理。 \n 9-1 入門 \n 創建新檔案 → 設定加工環境 → 操作導航器 ( 註 1)→ 設定機器座標系統 (MCS) → 定義幾何 \n 9-2 創建操作 \n 建立新操作 → 建立新工具並選擇 → 設定工具路徑 → 跨距和 Scallop 高度 ( 註 2)→ 設定每次切削深度 → 設定切削深度 → 設定迴避點 → 調整速度與進給 \n 9-3 生成程序和驗證 \n 生成程序 → 顯示刀具路徑 → 模擬刀具路徑 → 鑿檢驗 ( 註 3) \n 9-4 操作方法 \n 粗加工→半精加工 → 整理零件內外輪廓→精加工外部輪廓 → 精加工內部輪廓 \n 9-5 後期處理 \n 創建 CLSF→ 後期處理 \n \xa0 \n 註 1  “操作導航器”提供有關所創建程序的信息以及有關刀具，方法和策略的相應信息，可以在不同的類別列表中查看程序列表。 \n \xa0 \n 註 2  跨距的大小和刀具直徑將決定每步之間的 Scallop 高度。 減小跨步距離將使 Scallop 高度減低，但需要更多的步幅，因此需要更多的時間來加工特徵。 \n \xa0 \n 註 3  鑿檢驗用於驗證刀具是否確實從工件上去除了多餘的材料。在製造過程有缺陷的零件有兩種可能。一種是去除多餘的材料，另一種是留下應該清除的材料。在大多數情況下，前者更不理想，因為其不可能重新設計。', 'tags': '', 'url': 'CH9.html'}]};