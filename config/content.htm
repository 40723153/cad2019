<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>Solvespace</h1>
<h2>Solvespace編譯</h2>
<p><span>進入 Y:\portablegit\bin 找到檔案sh.exe 將其改名為 sh_rename_for_solvespace.exe</span></p>
<p><span>檢查git版本( git 2.13 版本以上, 可以使用下列 git clone <span>--recurse-submodules 取得所有子模組資料 </span>)</span></p>
<p><span>       git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace</span></p>
<p><span>( 取下子模組中的資料放在solvespace的資料夾中 )</span></p>
<p><span>上述步驟同:</span></p>
<p>     git clone <span><a href="https://github.com/solvespace/solvespace.git">https://github.com/solvespace/solvespace.git</a> </span></p>
<p><span>     cd solvespace</span></p>
<p><span>     git submodule init</span></p>
<p><span>     git submodule update</span></p>
<p><span>打開CMakeLists.txt檔案,將無法編譯的第713.714行進行註解</span></p>
<p><span>(edit Y:\tmp\solvespace\extlib\angle\CMakeLists.txt comment out line 713 and 714)</span></p>
<p>接著需要手動進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中 (即隨身系統的 msys64\mingw64\lib 目錄):</p>
<p>cd solvespace</p>
<p>cd extlib</p>
<p>cd libpng</p>
<p>mkdir build</p>
<p>cd build</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>mingw32-make</p>
<p><span>編譯完成後, 需將檔案libpng.dll.a重新命名為libpng_static.a並複製到 <span>Y:\msys64\mingw64\lib</span>, 即可執行.</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/39MHWaQZack" width="560"></iframe></p>
<h2>SolveSpace操作</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nWhRjTaPCmc" width="560"></iframe></p>
<p><iframe height="400" src="/downloads/方塊.html" width="600"></iframe></p>
<h1>V-rep</h1>
<h1>每週進度</h1>
<h2>w1</h2>
<h2>w2</h2>
<h2>w3</h2>
<h2>w4</h2>
<h2>W15</h2>
<p>w15 操作進度</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/PpFLan0LvQQ" width="560"></iframe></p>
<h2>W16</h2>
<p>w16 考試內容</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/MRaJFg3fWgI" width="560"></iframe></p>
<h2>W17</h2>
<p>分組翻譯內容</p>
<p>接合件</p>
<p>大多數時候，我們知道每個接合件的確切位置和方向。我們只需使用 [Menu bar --&gt; Add --&gt; Joint --&gt; ….]即可添加接合件，然後可以使用”位置”對話框和”方向”對話框更改它們的位置和方向。</p>
<p>但在只有Denavit-Hartenberg（即D-H）參數的情況下。我們可以通過模型瀏覽器中位於Models / tools / Denavit-Hartenberg聯合creator.ttm中的工具模型來構建接合件。</p>
<p>而當我們沒有關於接合件的位置和方向的信息時。我們需要從導入的網格中提取數據。</p>
<p>第一步是細分原始網格。如果無法進行，可以透過三角形編輯模式進行操作。成功後即可檢查較小的零組件。</p>
<p>在創建過程中我們要刪除所有不需要的對象，以便可視化/操作。</p>
<p><span> </span></p>
<p>我們可以通過頁面選擇器工具欄按鈕更改視角，以便從側面查看對象。 適合查看的工具欄按鈕可以派上用場，以正確構圖版本中的對象。 然後，我們切換到頂點編輯模式，並選擇屬於上光盤的所有頂點。 然後我們切換回三角形編輯模式：</p>
<p><img caption="false" height="370" p="" src="/images/modelTut12.jpg" width="600"/></p>
<p><br/> [選擇的上光盤，頂點編輯模式（1和2），三角形編輯模式（3）]</p>
<p>現在，通過 [Menu bar --&gt; Add --&gt; Joint --&gt; Revolute] 添加旋轉接合件，使其保持選中狀態，然後控制選擇提取的圓柱形狀。在位置對話框的“位置”選項卡上，單擊“應用於選擇”：這基本上將圓柱體的x / y / z座標位置複製到關節。現在兩個位置都相同。在方向對話框中的方向選項卡上，我們還單擊“應用於選擇”：所選對象的方向現在也相同。有時，我們將需要圍繞其自身的參考框架額外旋轉關節90/180度，以獲得正確的方向或旋轉方向。如果需要，我們可以在該對話框的“旋轉”選項卡上執行此操作（在這種情況下，請不要忘記單擊“自有框架”按鈕）。同樣，我們也可以沿關節的軸移動關節，甚至進行更複雜的操作。這就是我們所擁有的</p>
<p> </p>
<p>現在，我們將接合件複製回到原始場景中，並保存它</p>
<p>（不要忘記定期保存您的工作！）</p>
<p>我們對機器人中的所有關節重複上述過程，並且重新命名它們。</p>
<p>在默認情況下，接合件將分配給可見性層2，但現在，我們將所有關節分配給可見性層10，然後為場景臨時啟用可見性層10，以使這些關節也可視化（默認情況下，僅激活場景的可見性層1-8）。</p>
<p>這就是我們所建立完成的：</p>
<p><img alt="" height="519" src="/images/modelTut10.jpg" width="656"/></p>
<p>此時，我們可以開始構建模型層次結構並完成模型定義</p><h1>NX12</h1>
<h2>CH1.2</h2>
<h2>CH3.4</h2>
<h2>CH5.6</h2>
<h2>CH7.8</h2>
<h2>CH9</h2>
<p>此章節在介紹如何使用<span>NX12</span>生成用於三軸立式加工中心的<span>CNC</span>代碼製造模組，該模組使我們可以對鑽孔，銑削，車削和線切割<span>EDM</span>刀具路徑進行編程和一些後續處理。</p>
<p>9-1 入門</p>
<p>創建新檔案<span>→</span>設定加工環境<span>→</span>操作導航器<span>(</span>註<span>1)→</span>設定機器座標系統<span>(MCS) →</span>定義幾何</p>
<p>9-2 創建操作</p>
<p>建立新操作<span>→</span>建立新工具並選擇<span>→</span>設定工具路徑<span>→</span>跨距和<span>Scallop</span>高度<span>(</span>註<span>2)→</span>設定每次切削深度<span>→</span>設定切削深度<span>→</span>設定迴避點<span>→</span>調整速度與進給</p>
<p>9-3 生成程序和驗證</p>
<p>生成程序<span>→</span>顯示刀具路徑<span>→</span>模擬刀具路徑<span>→</span>鑿檢驗<span>(</span>註<span>3)</span></p>
<p>9-4 操作方法</p>
<p>粗加工→半精加工<span>→</span>整理零件內外輪廓→精加工外部輪廓<span>→</span>精加工內部輪廓</p>
<p>9-5 後期處理</p>
<p>創建<span>CLSF→</span>後期處理</p>
<p> </p>
<p>註<span>1 </span>“操作導航器”提供有關所創建程序的信息以及有關刀具，方法和策略的相應信息，可以在不同的類別列表中查看程序列表。</p>
<p> </p>
<p>註<span>2 </span>跨距的大小和刀具直徑將決定每步之間的<span>Scallop</span>高度。 減小跨步距離將使<span>Scallop</span>高度減低，但需要更多的步幅，因此需要更多的時間來加工特徵。</p>
<p> </p>
<p>註<span>3 </span>鑿檢驗用於驗證刀具是否確實從工件上去除了多餘的材料。在製造過程有缺陷的零件有兩種可能。一種是去除多餘的材料，另一種是留下應該清除的材料。在大多數情況下，前者更不理想，因為其不可能重新設計。</p>